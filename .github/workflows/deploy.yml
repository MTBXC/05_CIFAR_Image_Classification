name: Deploy to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_API: cifar-cnn-api
  ECR_REPOSITORY_MLFLOW: cifar-cnn-mlflow
  ECR_REPOSITORY_TRAINING: cifar-cnn-training

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest api/tests/ -v --cov=api --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push API image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_API:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:latest
    
    - name: Build, tag, and push MLflow image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.mlflow -t $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:$IMAGE_TAG .
        docker build -f Dockerfile.mlflow -t $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MLFLOW:latest
    
    - name: Build, tag, and push Training image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.training -t $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:$IMAGE_TAG .
        docker build -f Dockerfile.training -t $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_TRAINING:latest

  deploy-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Init
      run: |
        cd infra/aws/terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd infra/aws/terraform
        terraform plan -var-file="terraform.tfvars" -out="terraform.tfplan"
    
    - name: Terraform Apply
      run: |
        cd infra/aws/terraform
        terraform apply -auto-approve "terraform.tfplan"
    
    - name: Save Terraform Outputs
      run: |
        cd infra/aws/terraform
        terraform output -json > ../../terraform-outputs.json
    
    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: terraform-outputs.json

  deploy-services:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Download Terraform Outputs
      uses: actions/download-artifact@v3
      with:
        name: terraform-outputs
        path: ./
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update ECS Services
      run: |
        # Get cluster name from Terraform outputs
        CLUSTER_NAME=$(jq -r '.ecs_cluster_name.value' terraform-outputs.json)
        
        # Update API service
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service cifar-cnn-api \
          --force-new-deployment
        
        # Update MLflow service
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service cifar-cnn-mlflow \
          --force-new-deployment
        
        # Wait for services to stabilize
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services cifar-cnn-api cifar-cnn-mlflow
    
    - name: Run Health Checks
      run: |
        # Get ALB DNS name from Terraform outputs
        ALB_DNS=$(jq -r '.alb_dns_name.value' terraform-outputs.json)
        
        # Wait for services to be ready
        sleep 60
        
        # Check API health
        echo "Checking API health..."
        curl -f "http://$ALB_DNS/api/health" || exit 1
        
        # Check MLflow health
        echo "Checking MLflow health..."
        curl -f "http://$ALB_DNS/mlflow/health" || exit 1
        
        echo "All services are healthy!"

  notify:
    needs: [deploy-services]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download Terraform Outputs
      uses: actions/download-artifact@v3
      with:
        name: terraform-outputs
        path: ./
    
    - name: Notify Deployment Status
      run: |
        if [ "${{ needs.deploy-services.result }}" == "success" ]; then
          ALB_DNS=$(jq -r '.alb_dns_name.value' terraform-outputs.json)
          echo "‚úÖ Deployment successful!"
          echo "üåê API URL: http://$ALB_DNS"
          echo "üìä MLflow URL: http://$ALB_DNS/mlflow"
        else
          echo "‚ùå Deployment failed!"
        fi

